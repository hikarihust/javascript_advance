                                            Một số điều cần biết về Javascript

Javascript Runtime và Javascript Engine
    JS Runtime & Engine 
        JS Runtime và JS Engine là 2 thành phần chính để js có thể chạy được ở trên trình duyệt
        JS Runtime: Xét trong môi trường browser(trình duyệt)
        Đối với môi trường browser có 4 thành phần chính để giúp Javascript có thể chạy được cũng như xử lý được 
            các task vụ bất đồng bộ: Js Engine, Web APIs, Event Loops và Callback Queues
        Trong đó có thành phần quan trọng nhất là Js Engine
        Còn lại 3 thành phần khác có thể quản lý được các task vụ bất đồng bộ bao gồm
            Web APIs, Even Loops và Callback Queues
        Trong Js Engine lại tiếp tục được chia làm 2 thành phần chính là: Memory và Call Stack
            Memory: Để đoạn code có thể chạy được thì cần phải quản lý liên quan đến bộ nhớ. Khi khai báo các biến hay các hàm thì nó sẽ lưu trữ vào trong Memory
            Call Stack: Quản lý đoạn code nào đang thực thi. Khi hàm nào được thực thi thì nó sẽ được đẩy vào trong Call Stack, nếu hàm được thục thi xong thì sẽ được 
                remove ra khỏi Call Stack. Đối với Call Stack thì nó chỉ xử lý các task vụ đồng bộ trong Javascript thôi. Để xử lý được các task vụ bất đồng bộ thì cần 
                có thêm sự hỗ trợ của Event Loops và Callback Queues. Callback Queues cũng để quản thứ tự thực thi
        Js là 1 ngôn ngữ đơn luồng(Single Thread), ko thể thực thi song song cùng 1 lúc 2 task vụ được
Execution Context(ngữ cảnh thực thi)
    Context: Ngữ cảnh
    Execution: Thực thi
    Khi 1 đoạn chương trình Javascript được chạy thì Javascript Engine luôn luôn khởi tạo mới 1 Execution Context để theo dõi và và quản lý và giám sát trình tự thực thi
    Đoạn chương trình này có thể là 1 chương trình con hoặc toàn bộ ứng dụng khi khởi chạy lần đầu tiên 
        Chương trình chính(App): Global Execution Context(ngữ cảnh thực thi toàn cục)
        Chương trình con: Local Execution Context(ngữ cảnh thực thi cục bộ). Trong Js nói riêng hay lập trình nói chung thì các chương trình con mình coi đó là các function hay các method của object 
            nào đó
        App chỉ có 1 ngữ cảnh thực thi toàn cục và có thể có nhiều ngữ cảnh thực thi cục bộ
    Khi Js Engine tạo ra một Execution Context thì nó luôn luôn qua 2 giai đoạn: Creation Phase(giai đoạn khởi tạo) và Execution Phase(giai đoạn thực thi) 
    Creation Phase: Làm nhiều việc trong đó có việc setup memory để khởi tạo các biến toàn cục hay các biến local lưu trữ các biến, hàm
    Khi chương trình con được thực thi xong thì Execution Context sẽ được xoá bỏ và Javascript Engine sẽ thu dọn các biến môi trường nằm trong giai đoạn Creation Phase đã khởi tạo
Creation Phase(Giai đoạn khởi tạo)
    Giúp mình hiểu được các vấn đề liên quan đến tầm vực(Scope Chain) trong Javascript. Hiểu được từ khoá this trong Javascript
    Creation Phase sẽ làm 3 việc: Setup memory, Định nghĩa Scope Chain, Ràng buộc từ khóa this
    - Setup memory(Variables Envionments): Để lưu các giá trị các biến các hàm mà mình sẽ sử dụng trong chương trình. Phải có bước này thì chương trình mới có thể hoạ động được
    - Định nghĩa Scope Chain: Trong Javascript có khá nhiều dạng scope khác nhau. Scope có nghĩa là tầm vực, có nghĩa là làm sao có thể chia sẻ các biến của mình cho các tầm vực khác, hàm khác, file
        khác
        - Global Scope
        - Script Scope 
        - Block Scope 
        - Function Scope 
    - Ràng buộc từ khóa this (Ngoại trừ Arrow Function): Giúp dàng buộc từ khoá this vào trong ngữ cảnh thực thi. Đối với các function bình thường(ngoại trừ Arrow Function) thì nó sẽ tiến hành dàng buộc theo 3 dạng
        - Default binding: Dàng buộc mặc định 
        - Implicit binding: Dàng buộc ngầm
        - Explicit binding: Dàng buộc tường minh
        Đối với Arrow Function thì nó không tiến hành dàng buộc từ khoá this vào
    Khi chạy 1 app có Global memory: global = window = this 
    var: tầm vực global memory 
    let, const: Tầm vực Script Scope
Bài tập thực hành số 01 02 03
    Practice 01
    Temporal Dead Zone(TDZ)
        TDZ luôn luôn được khởi tạo khi bắt đầu 1 tầm vực mới và bên trong đó có sử dụng từ khóa let 
        Trong khu vực TDZ này ko thể sử dụng, truy cập được vào biến hay gán biến đó cho 1 giá trị, khi khởi tạo biến age thì sẽ kết 
            thúc khu vực TDZ 
        Khi muốn chia sẻ dữ liệu giữa 2 Scope khác nhau thì bắt buộc phải đẩy lên cấp cao hơn
        Cấp cao hơn tầm vực Script là Scope Global(window, this)
        window, this: giúp chia sẻ dữ liệu giữa 2 file 
            window.hello='world'
            this.course='Javascript'
    Practice 02
    Practice 03
Parameters và Arguments
    Function parameters là những tham số (variables) được đặt tên và liệt kê trong phần khai báo (định nghĩa) của một hàm
    Function arguments là những đối số đã được xác định giá trị được truyền vào hàm tại thời điểm thực thi hàm đó.
First Class Objects trong Javascript
    First Class Objects là những đối tượng cụ thể (entity, instance) trong lập trình mà tại thời điểm thực thi nó có thể được 
        truyền như là một argument, được gán cho một biến bất kỳ hoặc có thể được return từ một function khác
    First Class Function trong Javascript:
        Function trong Javascript cũng được coi như 1 Objects cho nên 1 function có thể được truyền vào trong 1 function khác,
            gán vào trong 1 biến, return 1 function ở bên trong 1 function khác
Tìm hiểu sâu về Function trong Javascript
Higher Order Functions và Callbacks
    HOF và Calllbacks 01
        Higher order functions là những hàm thỏa một trong hai điều kiện sau:
            Có thể nhận một function khác như là một đối số (argument)
            Output là một function
        Có rất nhiều Function cốt lõi của Javascript sử dụng cơ chế này khiến cho mã nguồn dễ đọc, đễ hiểu hơn
            như map, filter, reduce, ..
    HOF và Calllbacks 02
Closure là gì và ứng dụng
    Closure 01
    Closure 02
Implicit Binding và từ khóa "this" 
    This keyword
Explicit Binding, bind, call và apply
    Bind
    Call và apply
Bài tập thực hành số 04
    Practice 04
Strict mode
    Strict mode
    
    ===================================================================================================================

                                        Asynchronous ProgrammingChương Asynchronous Programming
                                        
Concurrency và Parallelism
    Concurrency, Parallelism
Single Thread và Blocking
    Single thread, Blocking
SetTimeout và những hiện tượng lạ
    SetTimeout
    